name: Sharebus Frotnend Production Environment Deployment
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: production
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout source code
        id: checkout_source_code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Replace Tokens
        uses: cschleiden/replace-tokens@v1.3
        with:
          tokenPrefix: "${"
          tokenSuffix: "}"
          files: '[".env.production"]'
        env:
          VUE_APP_AUTH_IDENTITY_POOL_ID: ${{ vars.VUE_APP_AUTH_IDENTITY_POOL_ID}}
          VUE_APP_AUTH_USER_POOL_ID: ${{ vars.VUE_APP_AUTH_USER_POOL_ID }}
          VUE_APP_AUTH_CLIENT_ID: ${{ vars.VUE_APP_AUTH_CLIENT_ID }}
          VUE_APP_GOOGLE_MAP_API_KEY: ${{ vars.VUE_APP_GOOGLE_MAP_API_KEY }}
          VUE_APP_APPSYNC_API_KEY: ${{ vars.VUE_APP_APPSYNC_API_KEY }}
          VUE_APP_STRIPE_PUBLIC_KEY: ${{ vars.VUE_APP_STRIPE_PUBLIC_KEY }}
          VUE_APP_APPSYNC_URL: ${{ vars.VUE_APP_APPSYNC_URL }}

      - name: Cache node modules
        id: cache_node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: NPM Token with PAT
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_PRIVATE_TOKEN }}
                @busgroup:registry=https://npm.pkg.github.com/ " > .npmrc
  
      - name: NPM Packages Install
        id: npm_package_install
        run: npm install

      - name: Test Build
        id: npm_build
        run: npm run build:prod

      - name: Test
        id: npm_test
        run: npm run test:unit
  
      - name: Deployment to production
        id: deploy_to_production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          DISTRIBUTION_ID: ${{ vars.AWS_DISTRIBUTION_ID }}
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          aws s3 cp \
            --recursive \
            --region ${{ vars.AWS_REGION }} \
            dist s3://${{ vars.AWS_BUCKET_NAME }}
          aws cloudfront create-invalidation --distribution-id ${{ vars.AWS_DISTRIBUTION_ID }} --paths "/*" --region ${{ vars.AWS_REGION }}

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true

      - name: Create a GitHub release
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: ${{ steps.tag_version.outputs.new_tag }}
          title: "Release ${{ steps.tag_version.outputs.new_tag }}"

      - name: slack - GitHub Actions Slack integration
        uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          config: .github/config/slack.yml
          steps: ${{ toJson(steps) }}
        if: always()